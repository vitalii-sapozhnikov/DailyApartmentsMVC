// <auto-generated />
using System;
using DailyApartmentsMVC.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DailyApartmentsMVC.Migrations
{
    partial class AirbnbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DailyApartmentsMVC.Models.AdditionalTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("integer")
                        .HasColumnName("attribute_id");

                    b.Property<int>("PropertyId")
                        .HasColumnType("integer")
                        .HasColumnName("property_id");

                    b.Property<bool>("Value")
                        .HasColumnType("boolean")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("additional_terms_pkey");

                    b.HasIndex("AttributeId");

                    b.HasIndex("PropertyId");

                    b.ToTable("additional_terms", (string)null);
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer")
                        .HasColumnName("guest_id");

                    b.Property<int>("PropertyId")
                        .HasColumnType("integer")
                        .HasColumnName("property_id");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("booking_pkey");

                    b.HasIndex("GuestId");

                    b.HasIndex("PropertyId");

                    b.ToTable("booking", (string)null);
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.BookingsCount", b =>
                {
                    b.Property<long?>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.ToTable("bookings_count", (string)null);
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GuestId")
                        .HasColumnType("integer")
                        .HasColumnName("guest_id");

                    b.Property<int>("PropertyOwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("property_owner_id");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("chat_pkey");

                    b.HasIndex("GuestId");

                    b.HasIndex("PropertyOwnerId");

                    b.HasIndex(new[] { "Time" }, "chat_time_key")
                        .IsUnique();

                    b.ToTable("chat", (string)null);
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.CheckIn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PropertyId")
                        .HasColumnType("integer")
                        .HasColumnName("property_id");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("check_in_pkey");

                    b.HasIndex("PropertyId");

                    b.ToTable("check_in", (string)null);
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.ClientReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer")
                        .HasColumnName("booking_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("comment");

                    b.Property<short>("Rate")
                        .HasColumnType("smallint")
                        .HasColumnName("rate");

                    b.HasKey("Id")
                        .HasName("client_review_pkey");

                    b.HasIndex("BookingId");

                    b.ToTable("client_review", (string)null);
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("Age")
                        .HasColumnType("smallint")
                        .HasColumnName("age");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<short>("SuccessfulDeals")
                        .HasColumnType("smallint")
                        .HasColumnName("successful_deals");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("guest_pkey");

                    b.ToTable("guest", (string)null);
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Message1")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("message");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("message_pkey");

                    b.HasIndex("Time");

                    b.ToTable("message", (string)null);
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.OwnerCityBooking", b =>
                {
                    b.Property<string>("City")
                        .HasColumnType("character varying")
                        .HasColumnName("city");

                    b.Property<long?>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.Property<int?>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Surname")
                        .HasColumnType("character varying")
                        .HasColumnName("surname");

                    b.ToTable((string)null);

                    b.ToView("owner_city_bookings", (string)null);
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.OwnersWithLowestBookingAmount", b =>
                {
                    b.Property<string>("City")
                        .HasColumnType("character varying")
                        .HasColumnName("city");

                    b.Property<long?>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Surname")
                        .HasColumnType("character varying")
                        .HasColumnName("surname");

                    b.ToTable((string)null);

                    b.ToView("owners_with_lowest_booking_amount", (string)null);
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<short?>("MinRentalDays")
                        .HasColumnType("smallint")
                        .HasColumnName("min_rental_days");

                    b.Property<string[]>("PhotoLinks")
                        .IsRequired()
                        .HasColumnType("character varying[]")
                        .HasColumnName("photo_links");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("PropertyOwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("property_owner_id");

                    b.Property<DateOnly?>("PublicationDate")
                        .HasColumnType("date")
                        .HasColumnName("publication_date");

                    b.Property<short>("RoomNumber")
                        .HasColumnType("smallint")
                        .HasColumnName("room_number");

                    b.Property<short>("SleepingPlaceNumber")
                        .HasColumnType("smallint")
                        .HasColumnName("sleeping_place_number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasColumnType("character varying")
                        .HasColumnName("type");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean")
                        .HasColumnName("verified");

                    b.HasKey("Id")
                        .HasName("property_pkey");

                    b.HasIndex("PropertyOwnerId");

                    b.ToTable("property", (string)null);
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.PropertyComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('proprety_comment_id_seq'::regclass)");

                    b.Property<int>("BookingId")
                        .HasColumnType("integer")
                        .HasColumnName("booking_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("comment");

                    b.HasKey("Id")
                        .HasName("proprety_comment_pkey");

                    b.HasIndex("BookingId");

                    b.ToTable("property_comment", (string)null);
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.PropertyOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("PassportId")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("passport_id");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("phone_number");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("surname");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("tax_number");

                    b.HasKey("Id")
                        .HasName("property_owner_pkey");

                    b.ToTable("property_owner", (string)null);
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.PropertyPriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("ChangeDate")
                        .HasColumnType("date")
                        .HasColumnName("change_date");

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("new_price");

                    b.Property<int>("PropertyId")
                        .HasColumnType("integer")
                        .HasColumnName("property_id");

                    b.HasKey("Id")
                        .HasName("property_price_history_pkey");

                    b.HasIndex("PropertyId");

                    b.ToTable("property_price_history", (string)null);
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.PropertyReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('proprety_review_id_seq'::regclass)");

                    b.Property<int>("BookingId")
                        .HasColumnType("integer")
                        .HasColumnName("booking_id");

                    b.Property<int>("ReviewAttributeId")
                        .HasColumnType("integer")
                        .HasColumnName("review_attribute_id");

                    b.Property<short?>("Value")
                        .HasColumnType("smallint")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("proprety_review_pkey");

                    b.HasIndex("BookingId");

                    b.HasIndex("ReviewAttributeId");

                    b.ToTable("property_review", (string)null);
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.ReviewAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("review_attribute_pkey");

                    b.ToTable("review_attribute", (string)null);
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.TermsAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("terms_attribute_pkey");

                    b.ToTable("terms_attribute", (string)null);
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.AdditionalTerm", b =>
                {
                    b.HasOne("DailyApartmentsMVC.Models.TermsAttribute", "Attribute")
                        .WithMany("AdditionalTerms")
                        .HasForeignKey("AttributeId")
                        .IsRequired()
                        .HasConstraintName("additional_terms_attribute_id_fkey");

                    b.HasOne("DailyApartmentsMVC.Models.Property", "Property")
                        .WithMany("AdditionalTerms")
                        .HasForeignKey("PropertyId")
                        .IsRequired()
                        .HasConstraintName("additional_terms_property_id_fkey");

                    b.Navigation("Attribute");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.Booking", b =>
                {
                    b.HasOne("DailyApartmentsMVC.Models.Guest", "Guest")
                        .WithMany("Bookings")
                        .HasForeignKey("GuestId")
                        .IsRequired()
                        .HasConstraintName("booking_guest_id_fkey");

                    b.HasOne("DailyApartmentsMVC.Models.Property", "Property")
                        .WithMany("Bookings")
                        .HasForeignKey("PropertyId")
                        .IsRequired()
                        .HasConstraintName("booking_property_id_fkey");

                    b.Navigation("Guest");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.Chat", b =>
                {
                    b.HasOne("DailyApartmentsMVC.Models.Guest", "Guest")
                        .WithMany("Chats")
                        .HasForeignKey("GuestId")
                        .IsRequired()
                        .HasConstraintName("chat_guest_id_fkey");

                    b.HasOne("DailyApartmentsMVC.Models.PropertyOwner", "PropertyOwner")
                        .WithMany("Chats")
                        .HasForeignKey("PropertyOwnerId")
                        .IsRequired()
                        .HasConstraintName("chat_property_owner_id_fkey");

                    b.Navigation("Guest");

                    b.Navigation("PropertyOwner");
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.CheckIn", b =>
                {
                    b.HasOne("DailyApartmentsMVC.Models.Property", "Property")
                        .WithMany("CheckIns")
                        .HasForeignKey("PropertyId")
                        .IsRequired()
                        .HasConstraintName("check_in_property_id_fkey");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.ClientReview", b =>
                {
                    b.HasOne("DailyApartmentsMVC.Models.Booking", "Booking")
                        .WithMany("ClientReviews")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("client_review_booking_id_fkey");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.Message", b =>
                {
                    b.HasOne("DailyApartmentsMVC.Models.Chat", "TimeNavigation")
                        .WithMany("Messages")
                        .HasForeignKey("Time")
                        .HasPrincipalKey("Time")
                        .IsRequired()
                        .HasConstraintName("message_time_fkey");

                    b.Navigation("TimeNavigation");
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.Property", b =>
                {
                    b.HasOne("DailyApartmentsMVC.Models.PropertyOwner", "PropertyOwner")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyOwnerId")
                        .IsRequired()
                        .HasConstraintName("property_property_owner_id_fkey");

                    b.Navigation("PropertyOwner");
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.PropertyComment", b =>
                {
                    b.HasOne("DailyApartmentsMVC.Models.Booking", "Booking")
                        .WithMany("PropertyComments")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("proprety_comment_booking_id_fkey");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.PropertyPriceHistory", b =>
                {
                    b.HasOne("DailyApartmentsMVC.Models.Property", "Property")
                        .WithMany("PropertyPriceHistories")
                        .HasForeignKey("PropertyId")
                        .IsRequired()
                        .HasConstraintName("property_price_history_property_id_fkey");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.PropertyReview", b =>
                {
                    b.HasOne("DailyApartmentsMVC.Models.Booking", "Booking")
                        .WithMany("PropertyReviews")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("proprety_review_booking_id_fkey");

                    b.HasOne("DailyApartmentsMVC.Models.ReviewAttribute", "ReviewAttribute")
                        .WithMany("PropertyReviews")
                        .HasForeignKey("ReviewAttributeId")
                        .IsRequired()
                        .HasConstraintName("proprety_review_review_attribute_id_fkey");

                    b.Navigation("Booking");

                    b.Navigation("ReviewAttribute");
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.Booking", b =>
                {
                    b.Navigation("ClientReviews");

                    b.Navigation("PropertyComments");

                    b.Navigation("PropertyReviews");
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.Guest", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Chats");
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.Property", b =>
                {
                    b.Navigation("AdditionalTerms");

                    b.Navigation("Bookings");

                    b.Navigation("CheckIns");

                    b.Navigation("PropertyPriceHistories");
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.PropertyOwner", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.ReviewAttribute", b =>
                {
                    b.Navigation("PropertyReviews");
                });

            modelBuilder.Entity("DailyApartmentsMVC.Models.TermsAttribute", b =>
                {
                    b.Navigation("AdditionalTerms");
                });
#pragma warning restore 612, 618
        }
    }
}
